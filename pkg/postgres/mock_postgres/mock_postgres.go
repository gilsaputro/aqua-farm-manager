// Code generated by MockGen. DO NOT EDIT.
// Source: C:\Users\gilsp\go\src\aqua-farm-manager\pkg\postgres\postgres.go

// Package mock_postgres is a generated GoMock package.
package mock_postgres

import (
	postgres "aqua-farm-manager/pkg/postgres"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockPostgresMethod is a mock of PostgresMethod interface.
type MockPostgresMethod struct {
	ctrl     *gomock.Controller
	recorder *MockPostgresMethodMockRecorder
}

// MockPostgresMethodMockRecorder is the mock recorder for MockPostgresMethod.
type MockPostgresMethodMockRecorder struct {
	mock *MockPostgresMethod
}

// NewMockPostgresMethod creates a new mock instance.
func NewMockPostgresMethod(ctrl *gomock.Controller) *MockPostgresMethod {
	mock := &MockPostgresMethod{ctrl: ctrl}
	mock.recorder = &MockPostgresMethodMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockPostgresMethod) EXPECT() *MockPostgresMethodMockRecorder {
	return m.recorder
}

// CheckStatExists mocks base method.
func (m *MockPostgresMethod) CheckStatExists(stat postgres.StatMetrics) bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CheckStatExists", stat)
	ret0, _ := ret[0].(bool)
	return ret0
}

// CheckStatExists indicates an expected call of CheckStatExists.
func (mr *MockPostgresMethodMockRecorder) CheckStatExists(stat interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CheckStatExists", reflect.TypeOf((*MockPostgresMethod)(nil).CheckStatExists), stat)
}

// GetStatRecodByKey mocks base method.
func (m *MockPostgresMethod) GetStatRecodByKey(stat *postgres.StatMetrics) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetStatRecodByKey", stat)
	ret0, _ := ret[0].(error)
	return ret0
}

// GetStatRecodByKey indicates an expected call of GetStatRecodByKey.
func (mr *MockPostgresMethodMockRecorder) GetStatRecodByKey(stat interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetStatRecodByKey", reflect.TypeOf((*MockPostgresMethod)(nil).GetStatRecodByKey), stat)
}

// Insert mocks base method.
func (m *MockPostgresMethod) Insert(model *postgres.StatMetrics) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Insert", model)
	ret0, _ := ret[0].(error)
	return ret0
}

// Insert indicates an expected call of Insert.
func (mr *MockPostgresMethodMockRecorder) Insert(model interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Insert", reflect.TypeOf((*MockPostgresMethod)(nil).Insert), model)
}

// UpdateStat mocks base method.
func (m *MockPostgresMethod) UpdateStat(stat *postgres.StatMetrics) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateStat", stat)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateStat indicates an expected call of UpdateStat.
func (mr *MockPostgresMethodMockRecorder) UpdateStat(stat interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateStat", reflect.TypeOf((*MockPostgresMethod)(nil).UpdateStat), stat)
}
