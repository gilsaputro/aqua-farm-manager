// Code generated by MockGen. DO NOT EDIT.
// Source: C:\Users\gilsp\go\src\aqua-farm-manager\internal\infrastructure\pond\pond.go

// Package mock_pond is a generated GoMock package.
package mock_pond

import (
	pond "aqua-farm-manager/internal/infrastructure/pond"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockPondStore is a mock of PondStore interface.
type MockPondStore struct {
	ctrl     *gomock.Controller
	recorder *MockPondStoreMockRecorder
}

// MockPondStoreMockRecorder is the mock recorder for MockPondStore.
type MockPondStoreMockRecorder struct {
	mock *MockPondStore
}

// NewMockPondStore creates a new mock instance.
func NewMockPondStore(ctrl *gomock.Controller) *MockPondStore {
	mock := &MockPondStore{ctrl: ctrl}
	mock.recorder = &MockPondStoreMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockPondStore) EXPECT() *MockPondStoreMockRecorder {
	return m.recorder
}

// Create mocks base method.
func (m *MockPondStore) Create(r *pond.PondInfraInfo) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", r)
	ret0, _ := ret[0].(error)
	return ret0
}

// Create indicates an expected call of Create.
func (mr *MockPondStoreMockRecorder) Create(r interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockPondStore)(nil).Create), r)
}

// Delete mocks base method.
func (m *MockPondStore) Delete(r *pond.PondInfraInfo) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", r)
	ret0, _ := ret[0].(error)
	return ret0
}

// Delete indicates an expected call of Delete.
func (mr *MockPondStoreMockRecorder) Delete(r interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockPondStore)(nil).Delete), r)
}

// GetPondByID mocks base method.
func (m *MockPondStore) GetPondByID(r *pond.PondInfraInfo) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPondByID", r)
	ret0, _ := ret[0].(error)
	return ret0
}

// GetPondByID indicates an expected call of GetPondByID.
func (mr *MockPondStoreMockRecorder) GetPondByID(r interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPondByID", reflect.TypeOf((*MockPondStore)(nil).GetPondByID), r)
}

// GetPondByName mocks base method.
func (m *MockPondStore) GetPondByName(r *pond.PondInfraInfo) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPondByName", r)
	ret0, _ := ret[0].(error)
	return ret0
}

// GetPondByName indicates an expected call of GetPondByName.
func (mr *MockPondStoreMockRecorder) GetPondByName(r interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPondByName", reflect.TypeOf((*MockPondStore)(nil).GetPondByName), r)
}

// GetPondIDbyFarmID mocks base method.
func (m *MockPondStore) GetPondIDbyFarmID(id uint) ([]uint, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPondIDbyFarmID", id)
	ret0, _ := ret[0].([]uint)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetPondIDbyFarmID indicates an expected call of GetPondIDbyFarmID.
func (mr *MockPondStoreMockRecorder) GetPondIDbyFarmID(id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPondIDbyFarmID", reflect.TypeOf((*MockPondStore)(nil).GetPondIDbyFarmID), id)
}

// GetPondWithPaging mocks base method.
func (m *MockPondStore) GetPondWithPaging(r pond.GetPondWithPagingRequest) ([]pond.PondInfraInfo, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPondWithPaging", r)
	ret0, _ := ret[0].([]pond.PondInfraInfo)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetPondWithPaging indicates an expected call of GetPondWithPaging.
func (mr *MockPondStoreMockRecorder) GetPondWithPaging(r interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPondWithPaging", reflect.TypeOf((*MockPondStore)(nil).GetPondWithPaging), r)
}

// Update mocks base method.
func (m *MockPondStore) Update(r *pond.PondInfraInfo) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Update", r)
	ret0, _ := ret[0].(error)
	return ret0
}

// Update indicates an expected call of Update.
func (mr *MockPondStoreMockRecorder) Update(r interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockPondStore)(nil).Update), r)
}

// Verify mocks base method.
func (m *MockPondStore) Verify(r *pond.PondInfraInfo) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Verify", r)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Verify indicates an expected call of Verify.
func (mr *MockPondStoreMockRecorder) Verify(r interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Verify", reflect.TypeOf((*MockPondStore)(nil).Verify), r)
}
