// Code generated by MockGen. DO NOT EDIT.
// Source: C:\Users\gilsp\go\src\aqua-farm-manager\internal\infrastructure\stat\stat.go

// Package mock_stat is a generated GoMock package.
package mock_stat

import (
	stat "aqua-farm-manager/internal/infrastructure/stat"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockStatStore is a mock of StatStore interface.
type MockStatStore struct {
	ctrl     *gomock.Controller
	recorder *MockStatStoreMockRecorder
}

// MockStatStoreMockRecorder is the mock recorder for MockStatStore.
type MockStatStoreMockRecorder struct {
	mock *MockStatStore
}

// NewMockStatStore creates a new mock instance.
func NewMockStatStore(ctrl *gomock.Controller) *MockStatStore {
	mock := &MockStatStore{ctrl: ctrl}
	mock.recorder = &MockStatStoreMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockStatStore) EXPECT() *MockStatStoreMockRecorder {
	return m.recorder
}

// BackupMetrics mocks base method.
func (m *MockStatStore) BackupMetrics(urlID, method string, request, uniqagent int) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "BackupMetrics", urlID, method, request, uniqagent)
	ret0, _ := ret[0].(error)
	return ret0
}

// BackupMetrics indicates an expected call of BackupMetrics.
func (mr *MockStatStoreMockRecorder) BackupMetrics(urlID, method, request, uniqagent interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BackupMetrics", reflect.TypeOf((*MockStatStore)(nil).BackupMetrics), urlID, method, request, uniqagent)
}

// GetMetrics mocks base method.
func (m *MockStatStore) GetMetrics(urlID, method string) (stat.Metrics, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetMetrics", urlID, method)
	ret0, _ := ret[0].(stat.Metrics)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetMetrics indicates an expected call of GetMetrics.
func (mr *MockStatStoreMockRecorder) GetMetrics(urlID, method interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetMetrics", reflect.TypeOf((*MockStatStore)(nil).GetMetrics), urlID, method)
}

// GetStatData mocks base method.
func (m *MockStatStore) GetStatData(urlID, method string) (stat.Metrics, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetStatData", urlID, method)
	ret0, _ := ret[0].(stat.Metrics)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetStatData indicates an expected call of GetStatData.
func (mr *MockStatStoreMockRecorder) GetStatData(urlID, method interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetStatData", reflect.TypeOf((*MockStatStore)(nil).GetStatData), urlID, method)
}

// IngestMetrics mocks base method.
func (m *MockStatStore) IngestMetrics(urlID, method, ua string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IngestMetrics", urlID, method, ua)
	ret0, _ := ret[0].(error)
	return ret0
}

// IngestMetrics indicates an expected call of IngestMetrics.
func (mr *MockStatStoreMockRecorder) IngestMetrics(urlID, method, ua interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IngestMetrics", reflect.TypeOf((*MockStatStore)(nil).IngestMetrics), urlID, method, ua)
}

// MigrateMetrics mocks base method.
func (m *MockStatStore) MigrateMetrics(url, method, request, uniqagent string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "MigrateMetrics", url, method, request, uniqagent)
	ret0, _ := ret[0].(error)
	return ret0
}

// MigrateMetrics indicates an expected call of MigrateMetrics.
func (mr *MockStatStoreMockRecorder) MigrateMetrics(url, method, request, uniqagent interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MigrateMetrics", reflect.TypeOf((*MockStatStore)(nil).MigrateMetrics), url, method, request, uniqagent)
}
