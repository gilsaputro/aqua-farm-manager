// Code generated by MockGen. DO NOT EDIT.
// Source: C:\Users\gilsp\go\src\aqua-farm-manager\internal\infrastructure\farm\farm.go

// Package mock_farm is a generated GoMock package.
package mock_farm

import (
	farm "aqua-farm-manager/internal/infrastructure/farm"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockFarmStore is a mock of FarmStore interface.
type MockFarmStore struct {
	ctrl     *gomock.Controller
	recorder *MockFarmStoreMockRecorder
}

// MockFarmStoreMockRecorder is the mock recorder for MockFarmStore.
type MockFarmStoreMockRecorder struct {
	mock *MockFarmStore
}

// NewMockFarmStore creates a new mock instance.
func NewMockFarmStore(ctrl *gomock.Controller) *MockFarmStore {
	mock := &MockFarmStore{ctrl: ctrl}
	mock.recorder = &MockFarmStoreMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockFarmStore) EXPECT() *MockFarmStoreMockRecorder {
	return m.recorder
}

// Create mocks base method.
func (m *MockFarmStore) Create(r *farm.FarmInfraInfo) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", r)
	ret0, _ := ret[0].(error)
	return ret0
}

// Create indicates an expected call of Create.
func (mr *MockFarmStoreMockRecorder) Create(r interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockFarmStore)(nil).Create), r)
}

// Delete mocks base method.
func (m *MockFarmStore) Delete(r *farm.FarmInfraInfo) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", r)
	ret0, _ := ret[0].(error)
	return ret0
}

// Delete indicates an expected call of Delete.
func (mr *MockFarmStoreMockRecorder) Delete(r interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockFarmStore)(nil).Delete), r)
}

// GetActivePondsInFarm mocks base method.
func (m *MockFarmStore) GetActivePondsInFarm(farmid uint) []uint {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetActivePondsInFarm", farmid)
	ret0, _ := ret[0].([]uint)
	return ret0
}

// GetActivePondsInFarm indicates an expected call of GetActivePondsInFarm.
func (mr *MockFarmStoreMockRecorder) GetActivePondsInFarm(farmid interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetActivePondsInFarm", reflect.TypeOf((*MockFarmStore)(nil).GetActivePondsInFarm), farmid)
}

// GetFarmByID mocks base method.
func (m *MockFarmStore) GetFarmByID(r *farm.FarmInfraInfo) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetFarmByID", r)
	ret0, _ := ret[0].(error)
	return ret0
}

// GetFarmByID indicates an expected call of GetFarmByID.
func (mr *MockFarmStoreMockRecorder) GetFarmByID(r interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetFarmByID", reflect.TypeOf((*MockFarmStore)(nil).GetFarmByID), r)
}

// GetFarmByName mocks base method.
func (m *MockFarmStore) GetFarmByName(r *farm.FarmInfraInfo) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetFarmByName", r)
	ret0, _ := ret[0].(error)
	return ret0
}

// GetFarmByName indicates an expected call of GetFarmByName.
func (mr *MockFarmStoreMockRecorder) GetFarmByName(r interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetFarmByName", reflect.TypeOf((*MockFarmStore)(nil).GetFarmByName), r)
}

// GetFarmWithPaging mocks base method.
func (m *MockFarmStore) GetFarmWithPaging(r farm.GetFarmWithPagingRequest) ([]farm.FarmInfraInfo, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetFarmWithPaging", r)
	ret0, _ := ret[0].([]farm.FarmInfraInfo)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetFarmWithPaging indicates an expected call of GetFarmWithPaging.
func (mr *MockFarmStoreMockRecorder) GetFarmWithPaging(r interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetFarmWithPaging", reflect.TypeOf((*MockFarmStore)(nil).GetFarmWithPaging), r)
}

// Update mocks base method.
func (m *MockFarmStore) Update(r *farm.FarmInfraInfo) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Update", r)
	ret0, _ := ret[0].(error)
	return ret0
}

// Update indicates an expected call of Update.
func (mr *MockFarmStoreMockRecorder) Update(r interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockFarmStore)(nil).Update), r)
}

// Verify mocks base method.
func (m *MockFarmStore) Verify(r *farm.FarmInfraInfo) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Verify", r)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Verify indicates an expected call of Verify.
func (mr *MockFarmStoreMockRecorder) Verify(r interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Verify", reflect.TypeOf((*MockFarmStore)(nil).Verify), r)
}
