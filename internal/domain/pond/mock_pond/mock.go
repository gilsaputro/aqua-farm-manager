// Code generated by MockGen. DO NOT EDIT.
// Source: C:\Users\gilsp\go\src\aqua-farm-manager\internal\domain\pond\pond.go

// Package mock_pond is a generated GoMock package.
package mock_pond

import (
	pond "aqua-farm-manager/internal/domain/pond"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockPondDomain is a mock of PondDomain interface.
type MockPondDomain struct {
	ctrl     *gomock.Controller
	recorder *MockPondDomainMockRecorder
}

// MockPondDomainMockRecorder is the mock recorder for MockPondDomain.
type MockPondDomainMockRecorder struct {
	mock *MockPondDomain
}

// NewMockPondDomain creates a new mock instance.
func NewMockPondDomain(ctrl *gomock.Controller) *MockPondDomain {
	mock := &MockPondDomain{ctrl: ctrl}
	mock.recorder = &MockPondDomainMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockPondDomain) EXPECT() *MockPondDomainMockRecorder {
	return m.recorder
}

// CreatePondInfo mocks base method.
func (m *MockPondDomain) CreatePondInfo(r pond.CreateDomainRequest) (pond.CreateDomainResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreatePondInfo", r)
	ret0, _ := ret[0].(pond.CreateDomainResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreatePondInfo indicates an expected call of CreatePondInfo.
func (mr *MockPondDomainMockRecorder) CreatePondInfo(r interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreatePondInfo", reflect.TypeOf((*MockPondDomain)(nil).CreatePondInfo), r)
}

// DeletePondInfo mocks base method.
func (m *MockPondDomain) DeletePondInfo(r pond.DeleteDomainRequest) (pond.DeleteDomainResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeletePondInfo", r)
	ret0, _ := ret[0].(pond.DeleteDomainResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeletePondInfo indicates an expected call of DeletePondInfo.
func (mr *MockPondDomainMockRecorder) DeletePondInfo(r interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeletePondInfo", reflect.TypeOf((*MockPondDomain)(nil).DeletePondInfo), r)
}

// GetAllPond mocks base method.
func (m *MockPondDomain) GetAllPond(size, cursor int) ([]pond.GetPondInfoResponse, int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAllPond", size, cursor)
	ret0, _ := ret[0].([]pond.GetPondInfoResponse)
	ret1, _ := ret[1].(int)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// GetAllPond indicates an expected call of GetAllPond.
func (mr *MockPondDomainMockRecorder) GetAllPond(size, cursor interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllPond", reflect.TypeOf((*MockPondDomain)(nil).GetAllPond), size, cursor)
}

// GetPondInfoByID mocks base method.
func (m *MockPondDomain) GetPondInfoByID(ID uint) (pond.GetPondInfoResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPondInfoByID", ID)
	ret0, _ := ret[0].(pond.GetPondInfoResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetPondInfoByID indicates an expected call of GetPondInfoByID.
func (mr *MockPondDomainMockRecorder) GetPondInfoByID(ID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPondInfoByID", reflect.TypeOf((*MockPondDomain)(nil).GetPondInfoByID), ID)
}

// UpdatePondInfo mocks base method.
func (m *MockPondDomain) UpdatePondInfo(r pond.UpdateDomainRequest) (pond.UpdateDomainResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdatePondInfo", r)
	ret0, _ := ret[0].(pond.UpdateDomainResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdatePondInfo indicates an expected call of UpdatePondInfo.
func (mr *MockPondDomainMockRecorder) UpdatePondInfo(r interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdatePondInfo", reflect.TypeOf((*MockPondDomain)(nil).UpdatePondInfo), r)
}
